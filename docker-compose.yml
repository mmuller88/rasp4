version: '3.6'

services:
  nodered:
    container_name: nodered
    build: .//services/nodered/.
    restart: unless-stopped
    user: "0"
    privileged: true
    environment:
      - NODE_RED_ENABLE_PROJECTS=true 
    ports:
      - "1880:1880"
    volumes:
      - .//volumes/nodered/data:/data

  influxdb:
    container_name: influxdb
    image: "influxdb:latest"
    restart: unless-stopped
    ports:
      - "8086:8086"
      - "8083:8083"
      - 8088:8088/tcp
      - "2003:2003"
    environment:
      INFLUXDB_BIND_ADDRESS: 0.0.0.0:8088
    env_file:
      - .//services/influxdb/influxdb.env
    volumes:
      - .//volumes/influxdb/data:/var/lib/influxdb
      - ./backups/influxdb/db:/var/lib/influxdb/backup

  influxdbbackup:
    container_name: influxdbbackup
    image: damadden88/influxdb-s3-backup:latest
    restart: unless-stopped
    environment:
      - DATABASE=mydb
      - DATABASE_HOST=influxdb
      - S3_BUCKET=rasp4backup
      - AWS_DEFAULT_REGION=eu-central-1
    env_file:
      - ./secret.env

  grafana:
    container_name: grafana
    image: grafana/grafana
    restart: unless-stopped
    user: "0"
    ports:
      - "3000:3000"
    env_file:
      - .//services/grafana/grafana.env
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - .//volumes/grafana/data:/var/lib/grafana
      - .//volumes/grafana/log:/var/log/grafana

  mosquitto:
    container_name: mosquitto
    image: eclipse-mosquitto
    restart: unless-stopped
    user: "1883"
    ports:
      - "1883:1883"
    volumes:
      - .//volumes/mosquitto/data:/mosquitto/data
      - .//volumes/mosquitto/log:/mosquitto/log
      - .//volumes/mosquitto/pwfile:/mosquitto/pwfile
      - .//services/mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf
      - .//services/mosquitto/filter.acl:/mosquitto/config/filter.acl

  zigbee2mqtt:
    container_name: zigbee2mqtt
    image: koenkk/zigbee2mqtt
    volumes:
      - .//volumes/zigbee2mqtt/data:/app/data
    devices:
      # - /dev/ttyAMA0:/dev/ttyACM0
      - /dev/ttyACM0:/dev/ttyACM0
    restart: unless-stopped
    network_mode: host
    privileged: true
    environment:
      - TZ=Europe/Amsterdam

  zigbee2mqttassistant:
    container_name: zigbee2mqttassistant
    image: carldebilly/zigbee2mqttassistant
    restart: unless-stopped
    # env_file:
    #   - ./services/zigbee2mqttassistant/zigbee2mqttassistant.env
    ports:
      - 8880:80
    environment:
      TZ: Europe/Berlin
      Z2MA_SETTINGS__MQTTSERVER: mosquitto
      VIRTUAL_HOST: ~^zigbee2mqttassistant\..*\.xip\.io
      VIRTUAL_PORT: 8880

  # pihole:
  #   container_name: pihole
  #   image: pihole/pihole:latest
  #   network_mode: host
  #   # ports:
  #   #   - "8089:80"
  #   #   - 53:53/tcp
  #   #   - 53:53/udp
  #   #   - 67:67/udp
  #   env_file:
  #     - .//services/pihole/pihole.env
  #   volumes:
  #      - .//volumes/pihole/etc-pihole/:/etc/pihole/
  #      - .//volumes/pihole/etc-dnsmasq.d/:/etc/dnsmasq.d/
  #   dns:
  #     - 127.0.0.1
  #     - 1.1.1.1
  #   # Recommended but not required (DHCP needs NET_ADMIN)
  #   #   https://github.com/pi-hole/docker-pi-hole#note-on-capabilities
  #   cap_add:
  #     - NET_ADMIN
  #   restart: unless-stopped

  # HTTP proxy to provide HTTP Default port access to services
  # SOLR API and SOLR Web Console are protected to avoid unauthenticated access
  # proxy:
  #   image: nginx:stable-alpine
  #   restart: unless-stopped
  #   container_name: proxy
  #   volumes:
  #     - ./services/nginx/nginx.conf:/etc/nginx/nginx.conf
  #   ports:
  #     - 80:80

  # HTTP proxy to provide HTTP Default port access to services
  # SOLR API and SOLR Web Console are protected to avoid unauthenticated access
  # proxy:
  #   image: nginx:alpine
  #   container_name: proxy
  #   volumes:
  #     - ./services/nginx/nginx.conf:/etc/nginx/nginx.conf
  #     - ./services/nginx/nginx.htpasswd:/etc/nginx/conf.d/nginx.htpasswd
  #   # ports:
  #   #   - 80:80
  #   environment:
  #     VIRTUAL_PORT: 80
  #     VIRTUAL_HOST: rasp4.martinmueller.dev # ${SERVER_HOST}
  #     LETSENCRYPT_HOST: rasp4.martinmueller.dev #${SERVER_HOST}
  #     LETSENCRYPT_EMAIL: damadden88@googlemail.net


  # nginxproxy:
  #   image: budry/jwilder-nginx-proxy-arm
  #   container_name: nginxproxy
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - certs:/etc/nginx/certs:ro
  #     - vhostd:/etc/nginx/vhost.d
  #     - html:/usr/share/nginx/html
  #     - /var/run/docker.sock:/tmp/docker.sock:ro

  # letsencrypt-nginx-proxy-companion:
  #   image: jrcs/letsencrypt-nginx-proxy-companion
  #   container_name: letsencrypt_nginx_proxy_companion
  #   environment:
  #     - NGINX_PROXY_CONTAINER=nginxproxy
  #   volumes:
  #     - certs:/etc/nginx/certs
  #     - vhostd:/etc/nginx/vhost.d
  #     - html:/usr/share/nginx/html
  #     - /var/run/docker.sock:/var/run/docker.sock:ro

# volumes: 
#   certs:
#   html:
#   vhostd: